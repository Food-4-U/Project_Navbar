Index: app/src/main/java/com/grupo1/food4u_nav/Backend.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import android.app.AlertDialog\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport com.grupo1.food4u_nav.models.*\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport okhttp3.MediaType.Companion.toMediaType\r\nimport org.json.JSONObject\r\nimport java.io.InputStream\r\nimport org.json.JSONArray as JSONArray\r\nimport okhttp3.OkHttpClient\r\nimport okhttp3.Request\r\nimport okhttp3.RequestBody\r\n\r\nobject Backend {\r\n\r\n    const val BASE_API = \"http://18.130.229.13:5000/api/\"\r\n\r\n    fun getAllClientes(callback: ((List<Cliente>) -> Unit)) {\r\n        var clientes = arrayListOf<Cliente>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\")\r\n                .build()\r\n\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var clienteJSON = resultArray[index] as JSONObject\r\n                        var cliente = Cliente.fromJSON(clienteJSON)\r\n                        clientes.add(cliente)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(clientes)\r\n                    }\r\n                }\r\n            } catch (e:Exception){\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(emptyList())\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getClienteEmail(email: String, callback: ((Cliente) -> Unit)) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente/Get/\" + email)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n                var cliente = Cliente.fromJSON(resultJSONObject)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(cliente)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getClientes(id_cliente: Int, callback: ((Cliente) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\" + \"/\" + id_cliente)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n                var cliente = Cliente.fromJSON(resultJSONObject)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(cliente)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addCliente(cliente: Cliente, callback: ((Boolean) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, cliente.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\" + \"/Registar\")\r\n                .post(body)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun Login(cliente: Cliente, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, cliente.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\" + \"/Login\")\r\n                .post(body)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun updateCliente(id_cliente: Int, cliente: Cliente, callback: ((Boolean) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, cliente.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\" + \"/\" + id_cliente)\r\n                .put(body)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun deleteCliente(id_cliente: Int, callback: ((Boolean) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\" + \"/\" + id_cliente)\r\n                .delete()\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // ITENS\r\n\r\n    fun getAllItens(callback: (List<Item_Menu>) -> Unit) {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item\")\r\n                .build()\r\n            try{\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            }catch (e:Exception){\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(emptyList())\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getItemSubCategory(subcategory: Int, callback: ((List<Item_Menu>) -> Unit)) {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/ItemSubcategoria/\" + subcategory)\r\n                .build()\r\n            try {\r\n\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            }catch (e:Exception){\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(itens)\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getItemCategory(id_category: Int, callback: ((List<Item_Menu>) -> Unit)) {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/ItemCategoria/\" + id_category)\r\n                .build()\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            }catch (e:Exception){\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(emptyList())\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    fun getItemTop(callback: ((List<Item_Menu>) -> Unit)) {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/ItemHot\")\r\n                .build()\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(emptyList())\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getItemTopRated(callback: ((List<Item_Menu>) -> Unit)): Unit {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/ItemTopRated\")\r\n                .build()\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(emptyList())\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    fun getItemID(id: Int, callback: ((Item_Menu) -> Unit)) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/Get/\" + id)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n                var item = Item_Menu.fromJSON(resultJSONObject)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(item)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addItem(item: Item_Menu, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, item.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item\" + \"/AdicionarItem\")\r\n                .post(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun updateItem(id: Int, item: Item_Menu, callback: ((Boolean) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, item.toJSON().toString()\r\n            )\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/Update/\" + id)\r\n                .put(body)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun deleteItem(id: Int, callback: ((Boolean) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/Delete\" + \"/\" + id)\r\n                .delete()\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun Favorites(id: Int, callback: (List<Item_Menu>) -> Unit) {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"item/Favoritos/\" + id)\r\n                .build()\r\n\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            }catch (e:Exception){\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // INGREDIENTES\r\n\r\n    fun getItensIngredientes(callback: (List<String>) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var ingredientes = arrayListOf<String>()\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Ingrediente/\")\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultArray = JSONArray(result)\r\n                for (index in 0 until resultArray.length()) {\r\n                    var ingredientesJSON = resultArray[index]\r\n                    var ingredienteName = ingredientesJSON\r\n                    ingredientes.add(ingredienteName.toString())\r\n                }\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(ingredientes)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getIngredientesByItem(id: Int, callback: (List<String>) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var ingredientes = arrayListOf<String>()\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Ingrediente/GetItensIngredientes/\" + id)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultArray = JSONArray(result)\r\n                for (index in 0 until resultArray.length()) {\r\n                    var ingredientesJSON = resultArray[index]\r\n                    var ingredienteName = ingredientesJSON\r\n                    ingredientes.add(ingredienteName.toString())\r\n                }\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(ingredientes)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // CATEGORIAS E SUBCATEGORIAS NOME\r\n\r\n    fun getNameCategory(id: Int, callback: ((CategoryType) -> Unit)) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var category = CategoryType\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria/Get/\" + id)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n                var category = CategoryType.fromJSON(resultJSONObject)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(category)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getIDCategory(name: String, callback: (Int) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var categoryID = 0\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria/GetIDCategory/\" + name)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                categoryID = result.toInt()\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(categoryID)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getAllCategoryNames(callback: (List<String>) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var categories = arrayListOf<String>()\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria/GetNome\")\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultArray = JSONArray(result)\r\n                for (index in 0 until resultArray.length()) {\r\n                    var categoryJSON = resultArray[index]\r\n                    var categoryName = categoryJSON\r\n                    categories.add(categoryName.toString())\r\n                }\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(categories)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getAllCategories(callback: ((List<CategoryType>) -> Unit)) {\r\n        var categories = arrayListOf<CategoryType>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria\")\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultArray = JSONArray(result)\r\n\r\n                for (index in 0 until resultArray.length()) {\r\n                    var clienteJSON = resultArray[index] as JSONObject\r\n                    var category = CategoryType.fromJSON(clienteJSON)\r\n                    categories.add(category)\r\n                }\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(categories)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getNameSubcategory(id: Int, callback: ((SubCategories) -> Unit)) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var subcategory = SubCategories\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria/GetItem/\" + id)\r\n                .build()\r\n            try{\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultJSONObject = JSONObject(result)\r\n                    var subcategory = SubCategories.fromJSON(resultJSONObject)\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(subcategory)\r\n                    }\r\n                }\r\n            }catch (e:Exception) {\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(SubCategories(null,null, null))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getAllSubcategories(callback: ((List<SubCategories>) -> Unit)) {\r\n        var subcategories = arrayListOf<SubCategories>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria\")\r\n                .build()\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var clienteJSON = resultArray[index] as JSONObject\r\n                        var subcategory = SubCategories.fromJSON(clienteJSON)\r\n                        subcategories.add(subcategory)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(subcategories)\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                //callback.invoke(null)\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    fun getAllSubcategoryNames(callback: (List<String>) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var subcategories = arrayListOf<String>()\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria/GetNome\")\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultArray = JSONArray(result)\r\n                for (index in 0 until resultArray.length()) {\r\n                    var subcategoryJSON = resultArray[index]\r\n                    var subcategoryName = subcategoryJSON\r\n                    subcategories.add(subcategoryName.toString())\r\n                }\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(subcategories)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getIDSubcategory(name: String, callback: (Int) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var subcategoryID: Int\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria/GetIDSubcategory/\" + name)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                subcategoryID = result.toInt()\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(subcategoryID)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun updateSubcategory(id: Int, subcategory: SubCategories, callback: (Boolean) -> Unit){\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, subcategory.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria/Update/\" + id)\r\n                .put(body)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    fun addCategory(categoryType: CategoryType, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, categoryType.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria\" + \"/AdicionarCategoria\")\r\n                .post(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun updateCategory(id: Int, categoryType: CategoryType, callback: (Boolean) -> Unit){\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, categoryType.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria/Update/\" + id)\r\n                .put(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun addSubcategory(subcategory: SubCategories, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, subcategory.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria\" + \"/AdicionarSubcategoria\")\r\n                .post(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun deleteSubcategory(id :Int , callback: (Boolean) -> Unit){\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria\" + \"/Delete/\" + id)\r\n                .delete()\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun deleteCategory(id :Int , callback: (Boolean) -> Unit){\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria\" + \"/Delete/\" + id)\r\n                .delete()\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addCard(card: CardNumber, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, card.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(\"http://18.130.229.13:5000/RegistarCartao/\")\r\n                .post(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Pedidos\r\n\r\n    fun addPedido(pedido: Pedido, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, pedido.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(\"http://18.130.229.13:5000/RegistarPedidos/\")\r\n                .post(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun GetPedidosDataCliente(id_cliente: Int, dataHora: String,callback: (Pedido) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, dataHora\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(\"http://18.130.229.13:5000/GetPedidoDataCliente/\" + id_cliente)\r\n                .post(body)\r\n                .build()\r\n\r\n            try{\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultJSONObject = JSONObject(result)\r\n                    var pedido = Pedido.fromJSON(resultJSONObject)\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(pedido)\r\n                    }\r\n                }\r\n            }catch (e:Exception) {\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(Pedido(null, null, null, null, null, null, null, null))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addItemPedido(pedido: ItensPedido, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, pedido.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(\"http://18.130.229.13:5000/RegistarItens/\")\r\n                .post(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/grupo1/food4u_nav/Backend.kt b/app/src/main/java/com/grupo1/food4u_nav/Backend.kt
--- a/app/src/main/java/com/grupo1/food4u_nav/Backend.kt	(revision 2f273646c5de23ee8485a03afcec8363049373ff)
+++ b/app/src/main/java/com/grupo1/food4u_nav/Backend.kt	(date 1655153168804)
@@ -883,20 +883,19 @@
         }
     }
 
-    fun GetPedidosDataCliente(id_cliente: Int, dataHora: String,callback: (Pedido) -> Unit) {
+    fun GetPedidosDataCliente(id_cliente: Int, dataHora: String ,callback: (Pedido) -> Unit) {
         GlobalScope.launch(Dispatchers.IO) {
             val mediaType = "application/json; charset=utf-8".toMediaType()
             val body: RequestBody = RequestBody.create(
                 mediaType, dataHora
             )
 
-            val client = OkHttpClient()
+            val client = OkHttpClient().newBuilder().build()
             val request = Request.Builder()
                 .url("http://18.130.229.13:5000/GetPedidoDataCliente/" + id_cliente)
                 .post(body)
                 .build()
-
-            try{
+            try {
                 client.newCall(request).execute().use { response ->
                     var result = response.body!!.string()
                     var resultJSONObject = JSONObject(result)
@@ -906,7 +905,7 @@
                         callback.invoke(pedido)
                     }
                 }
-            }catch (e:Exception) {
+            } catch (e:Exception) {
                 GlobalScope.launch(Dispatchers.Main) {
                     callback.invoke(Pedido(null, null, null, null, null, null, null, null))
                 }
Index: app/src/main/java/com/grupo1/food4u_nav/FinishOrderActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.grupo1.food4u_nav\r\n\r\nimport Backend\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.*\r\nimport android.widget.RatingBar.OnRatingBarChangeListener\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.ViewCompat\r\nimport androidx.core.view.WindowInsetsCompat\r\nimport androidx.core.view.WindowInsetsControllerCompat\r\nimport androidx.lifecycle.Observer\r\nimport com.grupo1.food4u_nav.models.data.CartDatabase\r\nimport com.grupo1.food4u_nav.models.data.CartItem\r\nimport com.squareup.picasso.Picasso\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport android.widget.RatingBar\r\n\r\n\r\nclass FinishOrderActivity : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_finish_order)\r\n\r\n        supportActionBar!!.hide()\r\n\r\n        @Suppress(\"DEPRECATION\")\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n            val windowInsetsController =\r\n                ViewCompat.getWindowInsetsController(window.decorView) ?: return\r\n            windowInsetsController.systemBarsBehavior =\r\n                WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE\r\n            windowInsetsController.hide(WindowInsetsCompat.Type.systemBars())\r\n        } else {\r\n            val flags =\r\n                (View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                        or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION or View.SYSTEM_UI_FLAG_FULLSCREEN or View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY)\r\n            window!!.decorView.systemUiVisibility = flags\r\n        }\r\n\r\n        var productName = findViewById<TextView>(R.id.finalizedOrderBottomName)\r\n        var productPhoto = findViewById<ImageView>(R.id.imageItemView)\r\n        val btnBack = findViewById<Button>(R.id.backBtn)\r\n        var ratingBar = findViewById<RatingBar>(R.id.ratingBar_itensOrdem)\r\n        var evaluationindicator = findViewById<TextView>(R.id.menu_foodEvauation3)\r\n        var avaliacao = false\r\n\r\n        btnBack.setOnClickListener {\r\n           /* GlobalScope.launch(Dispatchers.IO) {\r\n                CartDatabase.getDatabase(this@FinishOrderActivity)?.cartDao()!!.deleteCart()\r\n            }*/\r\n            var observ = getSharedPreferences(\"Observ\", Context.MODE_PRIVATE).edit().clear().apply()\r\n            var mesa = getSharedPreferences(\"Mesa\", MODE_PRIVATE).edit().clear().apply()\r\n\r\n            var intent = Intent(getApplicationContext(), MainActivity::class.java)\r\n            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\r\n            startActivity(intent)\r\n        }\r\n\r\n        val evaluatebtn = findViewById<TextView>(R.id.evaluatebtn)\r\n\r\n        CartDatabase.getDatabase(this).cartDao().readCart().observe(this, Observer {\r\n            var cart = it\r\n            var i = 0\r\n            var nota = 0.0\r\n\r\n            nota = Evaluate(cart[i],productName,productPhoto,ratingBar,evaluationindicator)\r\n            i++\r\n\r\n            evaluatebtn.setOnClickListener {\r\n                if (i < cart.size){\r\n                    nota =  Evaluate(cart[i],productName,productPhoto,ratingBar,evaluationindicator)\r\n                    i++\r\n                }\r\n                else {\r\n                    GlobalScope.launch(Dispatchers.IO) {\r\n                        //CartDatabase.getDatabase(this@FinishOrderActivity)?.cartDao()!!.deleteCart()\r\n                        var observ = getSharedPreferences(\"Observ\", Context.MODE_PRIVATE).edit().clear().apply()\r\n                        var mesa = getSharedPreferences(\"Mesa\", MODE_PRIVATE).edit().clear().apply()\r\n\r\n                        var intent = Intent(this@FinishOrderActivity, MainActivity::class.java)\r\n                        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\r\n                        startActivity(intent)\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    fun Evaluate (cart: CartItem,productName: TextView,productPhoto : ImageView,\r\n                  ratingBar: RatingBar,evaluationindicator: TextView): Double{\r\n\r\n        Backend.getItemID(cart.item_id!!){\r\n            productName.text = it.nome\r\n            Picasso.get().load(it.url).resize(800,650).into(productPhoto)\r\n        }\r\n        ratingBar.onRatingBarChangeListener =\r\n            OnRatingBarChangeListener { ratingBar, rating, fromUser ->\r\n                evaluationindicator.text = ratingBar.rating.toString()\r\n            }\r\n\r\n        ratingBar.rating = 4.50F\r\n\r\n        return ratingBar.rating.toDouble()\r\n\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/grupo1/food4u_nav/FinishOrderActivity.kt b/app/src/main/java/com/grupo1/food4u_nav/FinishOrderActivity.kt
--- a/app/src/main/java/com/grupo1/food4u_nav/FinishOrderActivity.kt	(revision 2f273646c5de23ee8485a03afcec8363049373ff)
+++ b/app/src/main/java/com/grupo1/food4u_nav/FinishOrderActivity.kt	(date 1655150062197)
@@ -51,15 +51,16 @@
         var avaliacao = false
 
         btnBack.setOnClickListener {
-           /* GlobalScope.launch(Dispatchers.IO) {
+           GlobalScope.launch(Dispatchers.IO) {
                 CartDatabase.getDatabase(this@FinishOrderActivity)?.cartDao()!!.deleteCart()
-            }*/
-            var observ = getSharedPreferences("Observ", Context.MODE_PRIVATE).edit().clear().apply()
-            var mesa = getSharedPreferences("Mesa", MODE_PRIVATE).edit().clear().apply()
+
+               var observ = getSharedPreferences("Observ", Context.MODE_PRIVATE).edit().clear().apply()
+               var mesa = getSharedPreferences("Mesa", MODE_PRIVATE).edit().clear().apply()
 
-            var intent = Intent(getApplicationContext(), MainActivity::class.java)
-            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
-            startActivity(intent)
+               var intent = Intent(getApplicationContext(), MainActivity::class.java)
+               intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
+               startActivity(intent)
+            }
         }
 
         val evaluatebtn = findViewById<TextView>(R.id.evaluatebtn)
@@ -79,7 +80,7 @@
                 }
                 else {
                     GlobalScope.launch(Dispatchers.IO) {
-                        //CartDatabase.getDatabase(this@FinishOrderActivity)?.cartDao()!!.deleteCart()
+                        CartDatabase.getDatabase(this@FinishOrderActivity)?.cartDao()!!.deleteCart()
                         var observ = getSharedPreferences("Observ", Context.MODE_PRIVATE).edit().clear().apply()
                         var mesa = getSharedPreferences("Mesa", MODE_PRIVATE).edit().clear().apply()
 
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 2f273646c5de23ee8485a03afcec8363049373ff)
+++ b/.idea/gradle.xml	(date 1655197900845)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>

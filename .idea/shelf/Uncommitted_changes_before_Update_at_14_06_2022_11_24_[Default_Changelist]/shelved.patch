Index: app/src/main/java/com/grupo1/food4u_nav/Backend.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import android.app.AlertDialog\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport androidx.core.text.htmlEncode\r\nimport com.grupo1.food4u_nav.models.*\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport okhttp3.MediaType.Companion.toMediaType\r\nimport org.json.JSONObject\r\nimport java.io.InputStream\r\nimport org.json.JSONArray as JSONArray\r\nimport okhttp3.OkHttpClient\r\nimport okhttp3.Request\r\nimport okhttp3.RequestBody\r\n\r\nobject Backend {\r\n\r\n    const val BASE_API = \"http://18.130.229.13:5000/api/\"\r\n\r\n    fun getAllClientes(callback: ((List<Cliente>) -> Unit)) {\r\n        var clientes = arrayListOf<Cliente>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\")\r\n                .build()\r\n\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var clienteJSON = resultArray[index] as JSONObject\r\n                        var cliente = Cliente.fromJSON(clienteJSON)\r\n                        clientes.add(cliente)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(clientes)\r\n                    }\r\n                }\r\n            } catch (e:Exception){\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(emptyList())\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getClienteEmail(email: String, callback: ((Cliente) -> Unit)) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente/Get/\" + email)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n                var cliente = Cliente.fromJSON(resultJSONObject)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(cliente)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getClientes(id_cliente: Int, callback: ((Cliente) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\" + \"/\" + id_cliente)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n                var cliente = Cliente.fromJSON(resultJSONObject)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(cliente)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addCliente(cliente: Cliente, callback: ((Boolean) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, cliente.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\" + \"/Registar\")\r\n                .post(body)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun Login(cliente: Cliente, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, cliente.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\" + \"/Login\")\r\n                .post(body)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun updateCliente(id_cliente: Int, cliente: Cliente, callback: ((Boolean) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, cliente.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\" + \"/\" + id_cliente)\r\n                .put(body)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun deleteCliente(id_cliente: Int, callback: ((Boolean) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\" + \"/\" + id_cliente)\r\n                .delete()\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // ITENS\r\n\r\n    fun getAllItens(callback: (List<Item_Menu>) -> Unit) {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item\")\r\n                .build()\r\n            try{\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            }catch (e:Exception){\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(emptyList())\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getItemSubCategory(subcategory: Int, callback: ((List<Item_Menu>) -> Unit)) {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/ItemSubcategoria/\" + subcategory)\r\n                .build()\r\n            try {\r\n\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            }catch (e:Exception){\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(itens)\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getItemCategory(id_category: Int, callback: ((List<Item_Menu>) -> Unit)) {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/ItemCategoria/\" + id_category)\r\n                .build()\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            }catch (e:Exception){\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(emptyList())\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    fun getItemTop(callback: ((List<Item_Menu>) -> Unit)) {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/ItemHot\")\r\n                .build()\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(emptyList())\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getItemTopRated(callback: ((List<Item_Menu>) -> Unit)): Unit {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/ItemTopRated\")\r\n                .build()\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(emptyList())\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    fun getItemID(id: Int, callback: ((Item_Menu) -> Unit)) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/Get/\" + id)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n                var item = Item_Menu.fromJSON(resultJSONObject)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(item)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addItem(item: Item_Menu, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, item.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item\" + \"/AdicionarItem\")\r\n                .post(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun updateItem(id: Int, item: Item_Menu, callback: ((Boolean) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, item.toJSON().toString()\r\n            )\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/Update/\" + id)\r\n                .put(body)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun deleteItem(id: Int, callback: ((Boolean) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/Delete\" + \"/\" + id)\r\n                .delete()\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun Favorites(id: Int, callback: (List<Item_Menu>) -> Unit) {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"item/Favoritos/\" + id)\r\n                .build()\r\n\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            }catch (e:Exception){\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // INGREDIENTES\r\n\r\n    fun getItensIngredientes(callback: (List<String>) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var ingredientes = arrayListOf<String>()\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Ingrediente/\")\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultArray = JSONArray(result)\r\n                for (index in 0 until resultArray.length()) {\r\n                    var ingredientesJSON = resultArray[index]\r\n                    var ingredienteName = ingredientesJSON\r\n                    ingredientes.add(ingredienteName.toString())\r\n                }\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(ingredientes)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getIngredientesByItem(id: Int, callback: (List<String>) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var ingredientes = arrayListOf<String>()\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Ingrediente/GetItensIngredientes/\" + id)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultArray = JSONArray(result)\r\n                for (index in 0 until resultArray.length()) {\r\n                    var ingredientesJSON = resultArray[index]\r\n                    var ingredienteName = ingredientesJSON\r\n                    ingredientes.add(ingredienteName.toString())\r\n                }\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(ingredientes)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // CATEGORIAS E SUBCATEGORIAS NOME\r\n\r\n    fun getNameCategory(id: Int, callback: ((CategoryType) -> Unit)) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var category = CategoryType\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria/Get/\" + id)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n                var category = CategoryType.fromJSON(resultJSONObject)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(category)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getIDCategory(name: String, callback: (Int) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var categoryID = 0\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria/GetIDCategory/\" + name)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                categoryID = result.toInt()\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(categoryID)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getAllCategoryNames(callback: (List<String>) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var categories = arrayListOf<String>()\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria/GetNome\")\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultArray = JSONArray(result)\r\n                for (index in 0 until resultArray.length()) {\r\n                    var categoryJSON = resultArray[index]\r\n                    var categoryName = categoryJSON\r\n                    categories.add(categoryName.toString())\r\n                }\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(categories)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getAllCategories(callback: ((List<CategoryType>) -> Unit)) {\r\n        var categories = arrayListOf<CategoryType>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria\")\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultArray = JSONArray(result)\r\n\r\n                for (index in 0 until resultArray.length()) {\r\n                    var clienteJSON = resultArray[index] as JSONObject\r\n                    var category = CategoryType.fromJSON(clienteJSON)\r\n                    categories.add(category)\r\n                }\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(categories)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getNameSubcategory(id: Int, callback: ((SubCategories) -> Unit)) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var subcategory = SubCategories\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria/GetItem/\" + id)\r\n                .build()\r\n            try{\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultJSONObject = JSONObject(result)\r\n                    var subcategory = SubCategories.fromJSON(resultJSONObject)\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(subcategory)\r\n                    }\r\n                }\r\n            }catch (e:Exception) {\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(SubCategories(null,null, null))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getAllSubcategories(callback: ((List<SubCategories>) -> Unit)) {\r\n        var subcategories = arrayListOf<SubCategories>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria\")\r\n                .build()\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var clienteJSON = resultArray[index] as JSONObject\r\n                        var subcategory = SubCategories.fromJSON(clienteJSON)\r\n                        subcategories.add(subcategory)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(subcategories)\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                //callback.invoke(null)\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    fun getAllSubcategoryNames(callback: (List<String>) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var subcategories = arrayListOf<String>()\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria/GetNome\")\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultArray = JSONArray(result)\r\n                for (index in 0 until resultArray.length()) {\r\n                    var subcategoryJSON = resultArray[index]\r\n                    var subcategoryName = subcategoryJSON\r\n                    subcategories.add(subcategoryName.toString())\r\n                }\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(subcategories)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getIDSubcategory(name: String, callback: (Int) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var subcategoryID: Int\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria/GetIDSubcategory/\" + name)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                subcategoryID = result.toInt()\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(subcategoryID)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun updateSubcategory(id: Int, subcategory: SubCategories, callback: (Boolean) -> Unit){\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, subcategory.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria/Update/\" + id)\r\n                .put(body)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    fun addCategory(categoryType: CategoryType, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, categoryType.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria\" + \"/AdicionarCategoria\")\r\n                .post(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun updateCategory(id: Int, categoryType: CategoryType, callback: (Boolean) -> Unit){\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, categoryType.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria/Update/\" + id)\r\n                .put(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun addSubcategory(subcategory: SubCategories, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, subcategory.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria\" + \"/AdicionarSubcategoria\")\r\n                .post(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun deleteSubcategory(id :Int , callback: (Boolean) -> Unit){\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria\" + \"/Delete/\" + id)\r\n                .delete()\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun deleteCategory(id :Int , callback: (Boolean) -> Unit){\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria\" + \"/Delete/\" + id)\r\n                .delete()\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addCard(card: CardNumber, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, card.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(\"http://18.130.229.13:5000/RegistarCartao/\")\r\n                .post(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Pedidos\r\n\r\n    fun addPedido(pedido: Pedido, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, pedido.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(\"http://18.130.229.13:5000/RegistarPedidos/\")\r\n                .post(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun GetPedidosDataCliente(id_cliente: Int, dataHora: String,callback: (Pedido) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(\"http://18.130.229.13:5000/GetPedidoDataCliente/\" + id_cliente + \"/\" + dataHora.htmlEncode())\r\n                .build()\r\n\r\n            try{\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultJSONObject = JSONObject(result)\r\n                    var pedido = Pedido.fromJSON(resultJSONObject)\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(pedido)\r\n                    }\r\n                }\r\n            }catch (e:Exception) {\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(Pedido(null, null, null, null, null, null, null, null))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addItemPedido(pedido: ItensPedido, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, pedido.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(\"http://18.130.229.13:5000/RegistarItens/\")\r\n                .post(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/grupo1/food4u_nav/Backend.kt b/app/src/main/java/com/grupo1/food4u_nav/Backend.kt
--- a/app/src/main/java/com/grupo1/food4u_nav/Backend.kt	(revision ad1e3bfb7f2f1a85bec32c978bbd6d633e99e1c7)
+++ b/app/src/main/java/com/grupo1/food4u_nav/Backend.kt	(date 1655198093000)
@@ -884,27 +884,20 @@
         }
     }
 
-    fun GetPedidosDataCliente(id_cliente: Int, dataHora: String,callback: (Pedido) -> Unit) {
+    fun GetPedidosDataCliente(id_cliente: Int, dataHora: String ,callback: (Pedido) -> Unit) {
         GlobalScope.launch(Dispatchers.IO) {
             val client = OkHttpClient()
             val request = Request.Builder()
                 .url("http://18.130.229.13:5000/GetPedidoDataCliente/" + id_cliente + "/" + dataHora.htmlEncode())
                 .build()
-
-            try{
-                client.newCall(request).execute().use { response ->
-                    var result = response.body!!.string()
-                    var resultJSONObject = JSONObject(result)
-                    var pedido = Pedido.fromJSON(resultJSONObject)
+            client.newCall(request).execute().use { response ->
+                var result = response.body!!.string()
+                var resultJSONObject = JSONObject(result)
+                var pedido = Pedido.fromJSON(resultJSONObject)
 
-                    GlobalScope.launch(Dispatchers.Main) {
-                        callback.invoke(pedido)
-                    }
+                GlobalScope.launch(Dispatchers.Main) {
+                    callback.invoke(pedido)
                 }
-            }catch (e:Exception) {
-                GlobalScope.launch(Dispatchers.Main) {
-                    callback.invoke(Pedido(null, null, null, null, null, null, null, null))
-                }
             }
         }
     }
@@ -916,7 +909,7 @@
                 mediaType, pedido.toJSON().toString()
             )
 
-            val client = OkHttpClient()
+            val client = OkHttpClient().newBuilder().build()
             val request = Request.Builder()
                 .url("http://18.130.229.13:5000/RegistarItens/")
                 .post(body)
Index: app/src/main/java/com/grupo1/food4u_nav/FinishOrderActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.grupo1.food4u_nav\r\n\r\nimport Backend\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.*\r\nimport android.widget.RatingBar.OnRatingBarChangeListener\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.ViewCompat\r\nimport androidx.core.view.WindowInsetsCompat\r\nimport androidx.core.view.WindowInsetsControllerCompat\r\nimport androidx.lifecycle.Observer\r\nimport com.grupo1.food4u_nav.models.data.CartDatabase\r\nimport com.grupo1.food4u_nav.models.data.CartItem\r\nimport com.squareup.picasso.Picasso\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport android.widget.RatingBar\r\n\r\n\r\nclass FinishOrderActivity : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_finish_order)\r\n\r\n        supportActionBar!!.hide()\r\n\r\n        @Suppress(\"DEPRECATION\")\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n            val windowInsetsController =\r\n                ViewCompat.getWindowInsetsController(window.decorView) ?: return\r\n            windowInsetsController.systemBarsBehavior =\r\n                WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE\r\n            windowInsetsController.hide(WindowInsetsCompat.Type.systemBars())\r\n        } else {\r\n            val flags =\r\n                (View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                        or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION or View.SYSTEM_UI_FLAG_FULLSCREEN or View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY)\r\n            window!!.decorView.systemUiVisibility = flags\r\n        }\r\n\r\n        var productName = findViewById<TextView>(R.id.finalizedOrderBottomName)\r\n        var productPhoto = findViewById<ImageView>(R.id.imageItemView)\r\n        val btnBack = findViewById<Button>(R.id.backBtn)\r\n        var ratingBar = findViewById<RatingBar>(R.id.ratingBar_itensOrdem)\r\n        var evaluationindicator = findViewById<TextView>(R.id.menu_foodEvauation3)\r\n        var avaliacao = false\r\n\r\n        btnBack.setOnClickListener {\r\n           /* GlobalScope.launch(Dispatchers.IO) {\r\n                CartDatabase.getDatabase(this@FinishOrderActivity)?.cartDao()!!.deleteCart()\r\n            }*/\r\n            var observ = getSharedPreferences(\"Observ\", Context.MODE_PRIVATE).edit().clear().apply()\r\n            var mesa = getSharedPreferences(\"Mesa\", MODE_PRIVATE).edit().clear().apply()\r\n\r\n            var intent = Intent(getApplicationContext(), MainActivity::class.java)\r\n            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\r\n            startActivity(intent)\r\n        }\r\n\r\n        val evaluatebtn = findViewById<TextView>(R.id.evaluatebtn)\r\n\r\n        CartDatabase.getDatabase(this).cartDao().readCart().observe(this, Observer {\r\n            var cart = it\r\n            var i = 0\r\n            var nota = 0.0\r\n\r\n            nota = Evaluate(cart[i],productName,productPhoto,ratingBar,evaluationindicator)\r\n            i++\r\n\r\n            evaluatebtn.setOnClickListener {\r\n                if (i < cart.size){\r\n                    nota =  Evaluate(cart[i],productName,productPhoto,ratingBar,evaluationindicator)\r\n                    i++\r\n                }\r\n                else {\r\n                    GlobalScope.launch(Dispatchers.IO) {\r\n                        //CartDatabase.getDatabase(this@FinishOrderActivity)?.cartDao()!!.deleteCart()\r\n                        var observ = getSharedPreferences(\"Observ\", Context.MODE_PRIVATE).edit().clear().apply()\r\n                        var mesa = getSharedPreferences(\"Mesa\", MODE_PRIVATE).edit().clear().apply()\r\n\r\n                        var intent = Intent(this@FinishOrderActivity, MainActivity::class.java)\r\n                        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\r\n                        startActivity(intent)\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    fun Evaluate (cart: CartItem,productName: TextView,productPhoto : ImageView,\r\n                  ratingBar: RatingBar,evaluationindicator: TextView): Double{\r\n\r\n        Backend.getItemID(cart.item_id!!){\r\n            productName.text = it.nome\r\n            Picasso.get().load(it.url).resize(800,650).into(productPhoto)\r\n        }\r\n        ratingBar.onRatingBarChangeListener =\r\n            OnRatingBarChangeListener { ratingBar, rating, fromUser ->\r\n                evaluationindicator.text = ratingBar.rating.toString()\r\n            }\r\n\r\n        ratingBar.rating = 4.50F\r\n\r\n        return ratingBar.rating.toDouble()\r\n\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/grupo1/food4u_nav/FinishOrderActivity.kt b/app/src/main/java/com/grupo1/food4u_nav/FinishOrderActivity.kt
--- a/app/src/main/java/com/grupo1/food4u_nav/FinishOrderActivity.kt	(revision ad1e3bfb7f2f1a85bec32c978bbd6d633e99e1c7)
+++ b/app/src/main/java/com/grupo1/food4u_nav/FinishOrderActivity.kt	(date 1655197919111)
@@ -51,15 +51,16 @@
         var avaliacao = false
 
         btnBack.setOnClickListener {
-           /* GlobalScope.launch(Dispatchers.IO) {
+           GlobalScope.launch(Dispatchers.IO) {
                 CartDatabase.getDatabase(this@FinishOrderActivity)?.cartDao()!!.deleteCart()
-            }*/
-            var observ = getSharedPreferences("Observ", Context.MODE_PRIVATE).edit().clear().apply()
-            var mesa = getSharedPreferences("Mesa", MODE_PRIVATE).edit().clear().apply()
+
+               var observ = getSharedPreferences("Observ", Context.MODE_PRIVATE).edit().clear().apply()
+               var mesa = getSharedPreferences("Mesa", MODE_PRIVATE).edit().clear().apply()
 
-            var intent = Intent(getApplicationContext(), MainActivity::class.java)
-            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
-            startActivity(intent)
+               var intent = Intent(getApplicationContext(), MainActivity::class.java)
+               intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
+               startActivity(intent)
+            }
         }
 
         val evaluatebtn = findViewById<TextView>(R.id.evaluatebtn)
@@ -79,7 +80,7 @@
                 }
                 else {
                     GlobalScope.launch(Dispatchers.IO) {
-                        //CartDatabase.getDatabase(this@FinishOrderActivity)?.cartDao()!!.deleteCart()
+                        CartDatabase.getDatabase(this@FinishOrderActivity)?.cartDao()!!.deleteCart()
                         var observ = getSharedPreferences("Observ", Context.MODE_PRIVATE).edit().clear().apply()
                         var mesa = getSharedPreferences("Mesa", MODE_PRIVATE).edit().clear().apply()
 
Index: app/src/main/java/com/grupo1/food4u_nav/ui/profile/viewPager/settings/PaymentMethodFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.grupo1.food4u_nav.ui.profile.viewPager.settings\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.isInvisible\r\nimport androidx.core.view.isVisible\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.FragmentActivity\r\nimport androidx.fragment.app.FragmentTransaction\r\nimport com.grupo1.food4u_nav.FinishOrderActivity\r\nimport com.grupo1.food4u_nav.OrderActivity\r\nimport com.grupo1.food4u_nav.R\r\nimport com.grupo1.food4u_nav.databinding.FragmentPaymentMethodBinding\r\nimport com.grupo1.food4u_nav.models.ItensPedido\r\nimport com.grupo1.food4u_nav.models.Pedido\r\nimport com.grupo1.food4u_nav.models.data.CartDatabase\r\nimport com.grupo1.food4u_nav.models.data.CartItem\r\nimport com.grupo1.food4u_nav.ui.home.DeskFragment\r\nimport com.grupo1.food4u_nav.ui.home.QRCodeFragment\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\n\r\nclass PaymentMethodFragment : Fragment() {\r\n\r\n    private var _binding: FragmentPaymentMethodBinding? = null\r\n    private val binding get() = _binding!!\r\n\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n        _binding = FragmentPaymentMethodBinding.inflate(inflater, container, false)\r\n\r\n        val backPayButton = binding.backButtonPayment\r\n        val cCard = binding.imageView25\r\n        val mbWay = binding.imageView27\r\n        val payPal = binding.imageView29\r\n        val counter = binding.imageView32\r\n        val payButton = binding.continueOrder\r\n        val addCard = binding.imageView37\r\n        val addText = binding.textView63\r\n        val plusImage = binding.imageView38\r\n\r\n        var cCardIsChecked = false\r\n        var mbWayIsChecked = false\r\n        var payPalIsChecked = false\r\n        var counterIsChecked = false\r\n\r\n        addCard.setOnClickListener{\r\n            val activity = requireView().context as AppCompatActivity\r\n            val myFragment: Fragment = CardFragment()\r\n            activity.supportFragmentManager.beginTransaction().setCustomAnimations(R.anim.slide_down, R.anim.slide_up)\r\n                .replace(R.id.paymentMethodFragment, myFragment).addToBackStack(null).commit()\r\n        }\r\n\r\n\r\n        backPayButton.setOnClickListener{\r\n            val i = Intent(activity, OrderActivity::class.java)\r\n            startActivity(i)\r\n        }\r\n\r\n        cCard.setOnClickListener {\r\n            mbWay.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_15)\r\n            payPal.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_14)\r\n            counter.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_11)\r\n            cCard.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_16)\r\n\r\n            cCardIsChecked = true\r\n            mbWayIsChecked = false\r\n            payPalIsChecked = false\r\n            counterIsChecked = false\r\n\r\n            if (cCardIsChecked == false) {\r\n                addCard.isInvisible = true\r\n                addText.isInvisible = true\r\n                plusImage!!.isInvisible = true\r\n            }\r\n            else {\r\n                addCard.isVisible = true\r\n                addText.isVisible = true\r\n                plusImage!!.isVisible = true\r\n            }\r\n        }\r\n\r\n        mbWay.setOnClickListener{\r\n            cCard.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_80)\r\n            mbWay.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_18)\r\n            counter.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_11)\r\n            payPal.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_14)\r\n\r\n            cCardIsChecked = false\r\n            mbWayIsChecked = true\r\n            payPalIsChecked = false\r\n            counterIsChecked = false\r\n\r\n            if (cCardIsChecked == false) {\r\n                addCard.isInvisible = true\r\n                addText.isInvisible = true\r\n                plusImage!!.isInvisible = true\r\n            }\r\n            else {\r\n                addCard.isVisible = true\r\n                addText.isVisible = true\r\n                plusImage!!.isVisible = true\r\n            }\r\n        }\r\n\r\n        payPal.setOnClickListener {\r\n            cCard.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_80)\r\n            mbWay.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_15)\r\n            counter.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_11)\r\n            payPal.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_19)\r\n\r\n            cCardIsChecked = false\r\n            mbWayIsChecked = false\r\n            payPalIsChecked = true\r\n            counterIsChecked = false\r\n\r\n            if (cCardIsChecked == false) {\r\n                addCard.isInvisible = true\r\n                addText.isInvisible = true\r\n                plusImage!!.isInvisible = true\r\n            }\r\n            else {\r\n                addCard.isVisible = true\r\n                addText.isVisible = true\r\n                plusImage!!.isVisible = true\r\n            }\r\n        }\r\n\r\n        counter.setOnClickListener {\r\n            cCard.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_80)\r\n            mbWay.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_15)\r\n            payPal.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_14)\r\n            counter.setImageResource(com.grupo1.food4u_nav.R.drawable.grupo_79)\r\n\r\n            cCardIsChecked = false\r\n            mbWayIsChecked = false\r\n            payPalIsChecked = false\r\n            counterIsChecked = true\r\n\r\n            if (cCardIsChecked == false) {\r\n                addCard.isInvisible = true\r\n                addText.isInvisible = true\r\n                plusImage!!.isInvisible = true\r\n            }\r\n            else {\r\n                addCard.isVisible = true\r\n                addText.isVisible = true\r\n                plusImage!!.isVisible = true\r\n            }\r\n        }\r\n\r\n\r\n        if (cCardIsChecked == false) {\r\n            addCard.isInvisible = true\r\n            addText.isInvisible = true\r\n            plusImage!!.isInvisible = true\r\n        }\r\n        else {\r\n            addCard.isVisible = true\r\n            addText.isVisible = true\r\n            plusImage!!.isVisible = true\r\n        }\r\n\r\n\r\n\r\n\r\n        payButton.setOnClickListener {\r\n            if (cCardIsChecked) {\r\n\r\n                var pedido = Pedido(null, null, null, null, null,\r\n                    null, null, null)\r\n\r\n                var dataFormat = SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\")\r\n                var date = dataFormat.format(Date().time)\r\n                pedido.dataHora = date\r\n                pedido.pago = true\r\n                pedido.id_mesa = requireContext().getSharedPreferences(\"Mesa\", AppCompatActivity.MODE_PRIVATE).getInt(\"id_mesa\", 0)\r\n                pedido.id_cliente = requireContext().getSharedPreferences(\"Cliente\", AppCompatActivity.MODE_PRIVATE).getInt(\"id\", 0)\r\n                pedido.total = requireContext().getSharedPreferences(\"Total\", AppCompatActivity.MODE_PRIVATE).getFloat(\"price\",0.0F).toDouble()\r\n\r\n                if (pedido.id_mesa == 0) {\r\n                    val fragmentManager = (activity as FragmentActivity).supportFragmentManager\r\n                    val fragmentTransaction: FragmentTransaction = fragmentManager.beginTransaction()\r\n                    fragmentTransaction.setCustomAnimations(R.anim.slide_down, R.anim.slide_up)\r\n                    fragmentTransaction.replace(R.id.containerOrder, DeskFragment())\r\n                    fragmentTransaction.addToBackStack(null).commit()\r\n\r\n                } else {\r\n                    Backend.addPedido(pedido) {\r\n                        if (!it) {\r\n                            Toast.makeText(\r\n                                requireActivity(),\r\n                                \"Erro.\",\r\n                                Toast.LENGTH_SHORT\r\n                            ).show()\r\n                        }\r\n\r\n                        var cliente = requireContext().getSharedPreferences(\"Cliente\", AppCompatActivity.MODE_PRIVATE).getInt(\"id\", 0)\r\n\r\n                        Backend.GetPedidosDataCliente(cliente, date){\r\n                            var itensPedido = ItensPedido(null, null, null, null)\r\n                            itensPedido.id_pedido = it.id_pedido\r\n\r\n                            CartDatabase.getDatabase(requireActivity()).cartDao().readCart().observe(requireActivity(), androidx.lifecycle.Observer {\r\n\r\n                                //este valor tem de ir para cart fora\r\n                                var cart = it\r\n\r\n                                for (i in 1..cart.size) {\r\n                                    itensPedido.id_pedido = pedido.id_pedido\r\n                                    itensPedido.id_item = cart[i - 1].item_id\r\n                                    itensPedido.qtd = cart[i - 1].quantidade\r\n\r\n                                    Backend.addItemPedido(itensPedido) {\r\n                                        if (it) {\r\n                                            Toast.makeText(\r\n                                                requireActivity(),\r\n                                                \"Pedido feito com sucesso,\",\r\n                                                Toast.LENGTH_SHORT\r\n                                            ).show()\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                            })\r\n                        }\r\n                    }\r\n\r\n                    val i = Intent(activity, FinishOrderActivity::class.java)\r\n                    startActivity(i)\r\n                }\r\n\r\n            }\r\n\r\n            else if (mbWayIsChecked) {\r\n\r\n                var pedido = Pedido(null, null, null, null, null,\r\n                    null, null, null)\r\n\r\n                var dataFormat = SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\")\r\n                var date = dataFormat.format(Date().time)\r\n                pedido.dataHora = date\r\n                pedido.pago = true\r\n                pedido.id_mesa = requireContext().getSharedPreferences(\"Mesa\", AppCompatActivity.MODE_PRIVATE).getInt(\"id_mesa\", 0)\r\n                pedido.id_cliente = requireContext().getSharedPreferences(\"Cliente\", AppCompatActivity.MODE_PRIVATE).getInt(\"id\", 0)\r\n                pedido.total = requireContext().getSharedPreferences(\"Total\", AppCompatActivity.MODE_PRIVATE).getFloat(\"price\",0.0F).toDouble()\r\n\r\n                if (pedido.id_mesa == 0) {\r\n                    val fragmentManager = (activity as FragmentActivity).supportFragmentManager\r\n                    val fragmentTransaction: FragmentTransaction = fragmentManager.beginTransaction()\r\n                    fragmentTransaction.setCustomAnimations(R.anim.slide_down, R.anim.slide_up)\r\n                    fragmentTransaction.replace(R.id.containerOrder, DeskFragment())\r\n                    fragmentTransaction.addToBackStack(null).commit()\r\n\r\n                } else {\r\n                    Backend.addPedido(pedido) {\r\n                        if (!it) {\r\n                            Toast.makeText(\r\n                                requireActivity(),\r\n                                \"Erro.\",\r\n                                Toast.LENGTH_SHORT\r\n                            ).show()\r\n                        }\r\n                    }\r\n                    val i = Intent(activity, FinishOrderActivity::class.java)\r\n                    startActivity(i)\r\n                }\r\n            }\r\n\r\n            else if (payPalIsChecked) {\r\n\r\n                var pedido = Pedido(null, null, null, null, null,\r\n                    null, null, null)\r\n\r\n                var dataFormat = SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\")\r\n                var date = dataFormat.format(Date().time)\r\n                pedido.dataHora = date\r\n                pedido.pago = true\r\n                pedido.id_mesa = requireContext().getSharedPreferences(\"Mesa\", AppCompatActivity.MODE_PRIVATE).getInt(\"id_mesa\", 0)\r\n                pedido.id_cliente = requireContext().getSharedPreferences(\"Cliente\", AppCompatActivity.MODE_PRIVATE).getInt(\"id\", 0)\r\n                pedido.total = requireContext().getSharedPreferences(\"Total\", AppCompatActivity.MODE_PRIVATE).getFloat(\"price\",0.0F).toDouble()\r\n\r\n                if (pedido.id_mesa == 0) {\r\n                    val fragmentManager = (activity as FragmentActivity).supportFragmentManager\r\n                    val fragmentTransaction: FragmentTransaction = fragmentManager.beginTransaction()\r\n                    fragmentTransaction.setCustomAnimations(R.anim.slide_down, R.anim.slide_up)\r\n                    fragmentTransaction.replace(R.id.containerOrder, DeskFragment())\r\n                    fragmentTransaction.addToBackStack(null).commit()\r\n\r\n                } else {\r\n                    Backend.addPedido(pedido) {\r\n                        if (!it) {\r\n                            Toast.makeText(\r\n                                requireActivity(),\r\n                                \"Erro.\",\r\n                                Toast.LENGTH_SHORT\r\n                            ).show()\r\n                        }\r\n                    }\r\n\r\n                    val i = Intent(activity, FinishOrderActivity::class.java)\r\n                    startActivity(i)\r\n                }\r\n\r\n            }\r\n\r\n            else if (counterIsChecked) {\r\n\r\n                var pedido = Pedido(null, null, null, null, null,\r\n                    null, null, null)\r\n\r\n                var dataFormat = SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\")\r\n                var date = dataFormat.format(Date().time)\r\n                pedido.dataHora = date\r\n                pedido.pago = true\r\n                pedido.id_mesa = requireContext().getSharedPreferences(\"Mesa\", AppCompatActivity.MODE_PRIVATE).getInt(\"id_mesa\", 0)\r\n                pedido.id_cliente = requireContext().getSharedPreferences(\"Cliente\", AppCompatActivity.MODE_PRIVATE).getInt(\"id\", 0)\r\n                pedido.total = requireContext().getSharedPreferences(\"Total\", AppCompatActivity.MODE_PRIVATE).getFloat(\"price\",0.0F).toDouble()\r\n\r\n                if (pedido.id_mesa == 0) {\r\n                    val fragmentManager = (activity as FragmentActivity).supportFragmentManager\r\n                    val fragmentTransaction: FragmentTransaction = fragmentManager.beginTransaction()\r\n                    fragmentTransaction.setCustomAnimations(R.anim.slide_down, R.anim.slide_up)\r\n                    fragmentTransaction.replace(R.id.containerOrder, DeskFragment())\r\n                    fragmentTransaction.addToBackStack(null).commit()\r\n\r\n                } else {\r\n                    Backend.addPedido(pedido) {\r\n                        if (!it) {\r\n                            Toast.makeText(\r\n                                requireActivity(),\r\n                                \"Erro.\",\r\n                                Toast.LENGTH_SHORT\r\n                            ).show()\r\n                        }\r\n                    }\r\n                    Toast.makeText(\r\n                        requireActivity(),\r\n                        \"Aguarde Funcionário.\",\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n\r\n                    val i = Intent(activity, FinishOrderActivity::class.java)\r\n                    startActivity(i)\r\n                }\r\n\r\n            } else {\r\n                Toast.makeText(\r\n                    requireActivity(),\r\n                    \"Por favor selecione uma opção.\",\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n            }\r\n        }\r\n\r\n        val prefs : SharedPreferences? = activity?.getSharedPreferences(\"Total\",\r\n            Context.MODE_PRIVATE\r\n        )\r\n\r\n        var totalPrice = prefs?.getString(\"preço\", \"\")\r\n        var textPrice = binding.totalPaymentMoney\r\n\r\n        textPrice.text = totalPrice.toString()\r\n\r\n        // Inflate the layout for this fragment\r\n        return binding.root\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/grupo1/food4u_nav/ui/profile/viewPager/settings/PaymentMethodFragment.kt b/app/src/main/java/com/grupo1/food4u_nav/ui/profile/viewPager/settings/PaymentMethodFragment.kt
--- a/app/src/main/java/com/grupo1/food4u_nav/ui/profile/viewPager/settings/PaymentMethodFragment.kt	(revision ad1e3bfb7f2f1a85bec32c978bbd6d633e99e1c7)
+++ b/app/src/main/java/com/grupo1/food4u_nav/ui/profile/viewPager/settings/PaymentMethodFragment.kt	(date 1655201403659)
@@ -170,6 +170,7 @@
             addText.isInvisible = true
             plusImage!!.isInvisible = true
         }
+
         else {
             addCard.isVisible = true
             addText.isVisible = true
@@ -177,8 +178,6 @@
         }
 
 
-
-
         payButton.setOnClickListener {
             if (cCardIsChecked) {
 
@@ -212,8 +211,8 @@
 
                         var cliente = requireContext().getSharedPreferences("Cliente", AppCompatActivity.MODE_PRIVATE).getInt("id", 0)
 
-                        Backend.GetPedidosDataCliente(cliente, date){
-                            var itensPedido = ItensPedido(null, null, null, null)
+                        Backend.GetPedidosDataCliente(cliente, date) {
+                            var itensPedido = ItensPedido (null, null, null, null)
                             itensPedido.id_pedido = it.id_pedido
 
                             CartDatabase.getDatabase(requireActivity()).cartDao().readCart().observe(requireActivity(), androidx.lifecycle.Observer {
@@ -236,7 +235,6 @@
                                         }
                                     }
                                 }
-
                             })
                         }
                     }
Index: app/src/main/java/com/grupo1/food4u_nav/models/Pedido.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.grupo1.food4u_nav.models\r\n\r\nimport org.json.JSONObject\r\nimport java.text.DateFormat\r\nimport java.util.*\r\n\r\nclass Pedido {\r\n\r\n    var id_pedido: Int? = null\r\n    var dataHora: String? = null\r\n    var total: Double? = null\r\n    var pago: Boolean? = false\r\n    var avaliação: Double? = null\r\n    var aval_funcio : Double? = null\r\n    var id_mesa : Int? = null\r\n    var id_cliente: Int? = null\r\n\r\n    constructor(\r\n        id_pedido: Int?,\r\n        dataHora: String?,\r\n        total: Double?,\r\n        pago: Boolean?,\r\n        avaliação: Double?,\r\n        aval_funcio: Double?,\r\n        id_mesa: Int?,\r\n        id_cliente: Int?,\r\n\r\n        //fav: Boolean\r\n    ) {\r\n        this.id_pedido = id_pedido\r\n        this.dataHora = dataHora\r\n        this.total = total\r\n        this.pago = pago\r\n        this.avaliação = avaliação\r\n        this.aval_funcio = aval_funcio\r\n        this.id_mesa = id_mesa\r\n        this.id_cliente = id_cliente\r\n    }\r\n\r\n    fun toJSON() : JSONObject {\r\n        val jsonObject = JSONObject()\r\n        jsonObject.put(\"id_pedido\", id_pedido)\r\n        jsonObject.put(\"dataHora\", dataHora)\r\n        jsonObject.put(\"total\", total)\r\n        jsonObject.put(\"pago\", pago)\r\n        jsonObject.put(\"avaliação\", avaliação)\r\n        jsonObject.put(\"aval_funcio\", aval_funcio)\r\n        jsonObject.put(\"id_mesa\", id_mesa)\r\n        jsonObject.put(\"id_cliente\", id_cliente)\r\n        return jsonObject\r\n    }\r\n\r\n    //\r\n    companion object{\r\n        fun fromJSON (jsonObject: JSONObject): Pedido {\r\n            return Pedido (\r\n                jsonObject[\"id_item\"] as? Int?,\r\n                jsonObject[\"dataHora\"] as? String?,\r\n                jsonObject[\"total\"] as? Double?,\r\n                jsonObject[\"pago\"] as? Boolean,\r\n                jsonObject[\"avaliação\"] as? Double,\r\n                jsonObject[\"aval_funcio\"] as? Double?,\r\n                jsonObject[\"id_mesa\"] as? Int?,\r\n                jsonObject[\"id_cliente\"] as? Int?\r\n            )\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/grupo1/food4u_nav/models/Pedido.kt b/app/src/main/java/com/grupo1/food4u_nav/models/Pedido.kt
--- a/app/src/main/java/com/grupo1/food4u_nav/models/Pedido.kt	(revision ad1e3bfb7f2f1a85bec32c978bbd6d633e99e1c7)
+++ b/app/src/main/java/com/grupo1/food4u_nav/models/Pedido.kt	(date 1655198306245)
@@ -54,7 +54,7 @@
     companion object{
         fun fromJSON (jsonObject: JSONObject): Pedido {
             return Pedido (
-                jsonObject["id_item"] as? Int?,
+                jsonObject["id_pedido"] as? Int?,
                 jsonObject["dataHora"] as? String?,
                 jsonObject["total"] as? Double?,
                 jsonObject["pago"] as? Boolean,
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision ad1e3bfb7f2f1a85bec32c978bbd6d633e99e1c7)
+++ b/.idea/gradle.xml	(date 1655197919127)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>

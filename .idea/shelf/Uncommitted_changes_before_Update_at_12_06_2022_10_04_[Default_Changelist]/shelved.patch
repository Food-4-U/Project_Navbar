Index: app/src/main/java/com/grupo1/food4u_nav/Backend.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import android.app.AlertDialog\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport com.grupo1.food4u_nav.models.*\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport okhttp3.MediaType.Companion.toMediaType\r\nimport org.json.JSONObject\r\nimport java.io.InputStream\r\nimport org.json.JSONArray as JSONArray\r\nimport okhttp3.OkHttpClient\r\nimport okhttp3.Request\r\nimport okhttp3.RequestBody\r\n\r\n\r\n\r\nobject Backend {\r\n\r\n    const val BASE_API = \"http://18.130.229.13:5000/api/\"\r\n\r\n    fun getAllClientes(callback: ((List<Cliente>) -> Unit)) {\r\n        var clientes = arrayListOf<Cliente>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\")\r\n                .build()\r\n\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var clienteJSON = resultArray[index] as JSONObject\r\n                        var cliente = Cliente.fromJSON(clienteJSON)\r\n                        clientes.add(cliente)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(clientes)\r\n                    }\r\n                }\r\n            } catch (e:Exception){\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(emptyList())\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getClienteEmail(email: String, callback: ((Cliente) -> Unit)) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente/Get/\" + email)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n                var cliente = Cliente.fromJSON(resultJSONObject)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(cliente)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getClientes(id_cliente: Int, callback: ((Cliente) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\" + \"/\" + id_cliente)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n                var cliente = Cliente.fromJSON(resultJSONObject)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(cliente)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addCliente(cliente: Cliente, callback: ((Boolean) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, cliente.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\" + \"/Registar\")\r\n                .post(body)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun Login(cliente: Cliente, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, cliente.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\" + \"/Login\")\r\n                .post(body)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun updateCliente(id_cliente: Int, cliente: Cliente, callback: ((Boolean) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, cliente.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\" + \"/\" + id_cliente)\r\n                .put(body)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun deleteCliente(id_cliente: Int, callback: ((Boolean) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Cliente\" + \"/\" + id_cliente)\r\n                .delete()\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // ITENS\r\n\r\n    fun getAllItens(callback: (List<Item_Menu>) -> Unit) {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item\")\r\n                .build()\r\n            try{\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            }catch (e:Exception){\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(emptyList())\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getItemSubCategory(subcategory: Int, callback: ((List<Item_Menu>) -> Unit)) {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/ItemSubcategoria/\" + subcategory)\r\n                .build()\r\n            try {\r\n\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            }catch (e:Exception){\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(itens)\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getItemCategory(id_category: Int, callback: ((List<Item_Menu>) -> Unit)) {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/ItemCategoria/\" + id_category)\r\n                .build()\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            }catch (e:Exception){\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(emptyList())\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    fun getItemTop(callback: ((List<Item_Menu>) -> Unit)) {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/ItemHot\")\r\n                .build()\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(emptyList())\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getItemTopRated(callback: ((List<Item_Menu>) -> Unit)): Unit {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/ItemTopRated\")\r\n                .build()\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(emptyList())\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    fun getItemID(id: Int, callback: ((Item_Menu) -> Unit)) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/Get/\" + id)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n                var item = Item_Menu.fromJSON(resultJSONObject)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(item)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addItem(item: Item_Menu, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, item.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item\" + \"/AdicionarItem\")\r\n                .post(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun updateItem(id: Int, item: Item_Menu, callback: ((Boolean) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, item.toJSON().toString()\r\n            )\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/Update/\" + id)\r\n                .put(body)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun deleteItem(id: Int, callback: ((Boolean) -> Unit)) {\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Item/Delete\" + \"/\" + id)\r\n                .delete()\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun Favorites(id: Int, callback: (List<Item_Menu>) -> Unit) {\r\n        var itens = arrayListOf<Item_Menu>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"item/Favoritos/\" + id)\r\n                .build()\r\n\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var itemJSON = resultArray[index] as JSONObject\r\n                        var item = Item_Menu.fromJSON(itemJSON)\r\n                        itens.add(item)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(itens)\r\n                    }\r\n                }\r\n            }catch (e:Exception){\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // INGREDIENTES\r\n\r\n    fun getItensIngredientes(callback: (List<String>) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var ingredientes = arrayListOf<String>()\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Ingrediente/\")\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultArray = JSONArray(result)\r\n                for (index in 0 until resultArray.length()) {\r\n                    var ingredientesJSON = resultArray[index]\r\n                    var ingredienteName = ingredientesJSON\r\n                    ingredientes.add(ingredienteName.toString())\r\n                }\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(ingredientes)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getIngredientesByItem(id: Int, callback: (List<String>) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var ingredientes = arrayListOf<String>()\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Ingrediente/GetItensIngredientes/\" + id)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultArray = JSONArray(result)\r\n                for (index in 0 until resultArray.length()) {\r\n                    var ingredientesJSON = resultArray[index]\r\n                    var ingredienteName = ingredientesJSON\r\n                    ingredientes.add(ingredienteName.toString())\r\n                }\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(ingredientes)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // CATEGORIAS E SUBCATEGORIAS NOME\r\n\r\n    fun getNameCategory(id: Int, callback: ((CategoryType) -> Unit)) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var category = CategoryType\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria/Get/\" + id)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n                var category = CategoryType.fromJSON(resultJSONObject)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(category)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getIDCategory(name: String, callback: (Int) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var categoryID = 0\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria/GetIDCategory/\" + name)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                categoryID = result.toInt()\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(categoryID)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getAllCategoryNames(callback: (List<String>) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var categories = arrayListOf<String>()\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria/GetNome\")\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultArray = JSONArray(result)\r\n                for (index in 0 until resultArray.length()) {\r\n                    var categoryJSON = resultArray[index]\r\n                    var categoryName = categoryJSON\r\n                    categories.add(categoryName.toString())\r\n                }\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(categories)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getAllCategories(callback: ((List<CategoryType>) -> Unit)) {\r\n        var categories = arrayListOf<CategoryType>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria\")\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultArray = JSONArray(result)\r\n\r\n                for (index in 0 until resultArray.length()) {\r\n                    var clienteJSON = resultArray[index] as JSONObject\r\n                    var category = CategoryType.fromJSON(clienteJSON)\r\n                    categories.add(category)\r\n                }\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(categories)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getNameSubcategory(id: Int, callback: ((SubCategories) -> Unit)) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var subcategory = SubCategories\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria/GetItem/\" + id)\r\n                .build()\r\n            try{\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultJSONObject = JSONObject(result)\r\n                    var subcategory = SubCategories.fromJSON(resultJSONObject)\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(subcategory)\r\n                    }\r\n                }\r\n            }catch (e:Exception ){\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(SubCategories(null,null, null))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getAllSubcategories(callback: ((List<SubCategories>) -> Unit)) {\r\n        var subcategories = arrayListOf<SubCategories>()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria\")\r\n                .build()\r\n            try {\r\n                client.newCall(request).execute().use { response ->\r\n                    var result = response.body!!.string()\r\n                    var resultArray = JSONArray(result)\r\n\r\n                    for (index in 0 until resultArray.length()) {\r\n                        var clienteJSON = resultArray[index] as JSONObject\r\n                        var subcategory = SubCategories.fromJSON(clienteJSON)\r\n                        subcategories.add(subcategory)\r\n                    }\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        callback.invoke(subcategories)\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                //callback.invoke(null)\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    fun getAllSubcategoryNames(callback: (List<String>) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var subcategories = arrayListOf<String>()\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria/GetNome\")\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultArray = JSONArray(result)\r\n                for (index in 0 until resultArray.length()) {\r\n                    var subcategoryJSON = resultArray[index]\r\n                    var subcategoryName = subcategoryJSON\r\n                    subcategories.add(subcategoryName.toString())\r\n                }\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(subcategories)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getIDSubcategory(name: String, callback: (Int) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            var subcategoryID: Int\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria/GetIDSubcategory/\" + name)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                subcategoryID = result.toInt()\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    callback.invoke(subcategoryID)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun updateSubcategory(id: Int, subcategory: SubCategories, callback: (Boolean) -> Unit){\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, subcategory.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria/Update/\" + id)\r\n                .put(body)\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    fun addCategory(categoryType: CategoryType, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, categoryType.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria\" + \"/AdicionarCategoria\")\r\n                .post(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun updateCategory(id: Int, categoryType: CategoryType, callback: (Boolean) -> Unit){\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, categoryType.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria/Update/\" + id)\r\n                .put(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun addSubcategory(subcategory: SubCategories, callback: (Boolean) -> Unit) {\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val mediaType = \"application/json; charset=utf-8\".toMediaType()\r\n            val body: RequestBody = RequestBody.create(\r\n                mediaType, subcategory.toJSON().toString()\r\n            )\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria\" + \"/AdicionarSubcategoria\")\r\n                .post(body)\r\n                .build()\r\n\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun deleteSubcategory(id :Int , callback: (Boolean) -> Unit){\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Subcategoria\" + \"/Delete/\" + id)\r\n                .delete()\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun deleteCategory(id :Int , callback: (Boolean) -> Unit){\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n\r\n            val client = OkHttpClient()\r\n            val request = Request.Builder()\r\n                .url(BASE_API + \"Categoria\" + \"/Delete/\" + id)\r\n                .delete()\r\n                .build()\r\n            client.newCall(request).execute().use { response ->\r\n                var result = response.body!!.string()\r\n                var resultJSONObject = JSONObject(result)\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    val status = resultJSONObject.getString(\"status\")\r\n                    callback.invoke(status == \"ok\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/grupo1/food4u_nav/Backend.kt b/app/src/main/java/com/grupo1/food4u_nav/Backend.kt
--- a/app/src/main/java/com/grupo1/food4u_nav/Backend.kt	(revision 42d967e51fe14a4e7352e39b5415f3fc2cd10179)
+++ b/app/src/main/java/com/grupo1/food4u_nav/Backend.kt	(date 1654973660942)
@@ -611,7 +611,7 @@
                         callback.invoke(subcategory)
                     }
                 }
-            }catch (e:Exception ){
+            }catch (e:Exception) {
                 GlobalScope.launch(Dispatchers.Main) {
                     callback.invoke(SubCategories(null,null, null))
                 }
Index: app/src/main/java/com/grupo1/food4u_nav/models/CategoryType.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.grupo1.food4u_nav.models\r\n\r\nimport org.json.JSONObject\r\n\r\nclass CategoryType {\r\n\r\n    constructor(id: Int?, name: String, url: String?) {\r\n        this.id = id\r\n        this.name = name\r\n        this.url = url\r\n    }\r\n\r\n    var id: Int?\r\n    var name: String\r\n    var url: String?\r\n\r\n\r\n    fun toJSON() : JSONObject {\r\n        val jsonObject = JSONObject()\r\n        jsonObject.put(\"id_categoria\", id)\r\n        jsonObject.put(\"nome\", name)\r\n        jsonObject.put(\"url\", url)\r\n        return jsonObject\r\n    }\r\n\r\n    companion object{\r\n        fun fromJSON(jsonObject: JSONObject): CategoryType {\r\n            return CategoryType (\r\n                jsonObject[\"id_categoria\"] as Int,\r\n                jsonObject[\"nome\"] as String,\r\n                jsonObject[\"url\"] as? String?\r\n            )\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/grupo1/food4u_nav/models/CategoryType.kt b/app/src/main/java/com/grupo1/food4u_nav/models/CategoryType.kt
--- a/app/src/main/java/com/grupo1/food4u_nav/models/CategoryType.kt	(revision 42d967e51fe14a4e7352e39b5415f3fc2cd10179)
+++ b/app/src/main/java/com/grupo1/food4u_nav/models/CategoryType.kt	(date 1654977849488)
@@ -12,7 +12,7 @@
 
     var id: Int?
     var name: String
-    var url: String?
+    var url: String? = null
 
 
     fun toJSON() : JSONObject {
